# For full config options, check the docs:
#    docs.serverless.com

service: speedsnitch

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: go1.x
  timeout: 300
  apiKeys:
    - ${self:custom.namespace}-admin
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:DeleteItem"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:UpdateItem"
      Resource:
        - Fn::GetAtt:
          - dataTable
          - Arn
        - Fn::GetAtt:
          - taskLogTable
          - Arn

  # you can define service wide environment variables here
  environment:
    stage: ${self:custom.stage}
    namespace: ${self:custom.namespace}
    dataTable: ${self:custom.dataTable}
    taskLogTable: ${self:custom.taskLogTable}
    downloadBaseUrl: ${env:DOWNLOAD_BASE_URL}

custom:
  stage: ${opt:stage, self:provider.stage}
  namespace: ${self:service}_${self:custom.stage}
  dataTable: ${self:custom.namespace}_data
  taskLogTable: speedsnitch_${self:custom.stage}_task_log
  maxRcu: 100
  minRcu: 5
  maxWcu: 100
  minWcu: 5

package:
 exclude:
   - ./**
 include:
   - ../../bin/**

functions:
  dailysnapshot:
      handler: bin/dailysnapshot
      events:
        - schedule: cron(0 1 * * ? *) # every day at 1 AM UTC

  node:
      handler: bin/node
      events:
        - http:
            path: node
            method: GET
            private: true

        - http:
            path: /node/{macAddr}
            method: GET
            private: true
            request:
              parameters:
                paths:
                  macAddr: true
        - http:
            path: /node/{macAddr}/tag
            method: GET
            private: true
            request:
              parameters:
                paths:
                  macAddr: true
        - http:
            path: /node/{macAddr}
            method: PUT
            private: true
            request:
              parameters:
                paths:
                  macAddr: true
        - http:
            path: /node/{macAddr}
            method: DELETE
            private: true
            request:
              parameters:
                paths:
                  macAddr: true

  report:
      handler: bin/report
      events:
        - http:
            path: /report/node/{macAddr}
            method: GET
            private: true
            request:
              parameters:
                paths:
                  macAddr: true

  tag:
      handler: bin/tag
      events:
        - http:
            path: tag
            method: GET
            private: true

        - http:
            path: tag
            method: POST
            private: true

        - http:
            path: /tag/{uid}
            method: GET
            private: true
            request:
              parameters:
                paths:
                  uid: true
        - http:
            path: /tag/{uid}
            method: PUT
            private: true
            request:
              parameters:
                paths:
                  uid: true
        - http:
            path: /tag/{uid}
            method: DELETE
            private: true
            request:
              parameters:
                paths:
                  uid: true
  namedserver:
      handler: bin/namedserver
      events:
        - http:
            path: namedserver
            method: GET
            private: true
        - http:
            path: namedserver
            method: POST
            private: true
        - http:
            path: /namedserver/{uid}
            method: GET
            private: true
            request:
              parameters:
                paths:
                  uid: true
        - http:
            path: /namedserver/{uid}
            method: PUT
            private: true
            request:
              parameters:
                paths:
                  uid: true
        - http:
            path: /namedserver/{uid}
            method: DELETE
            private: true
            request:
              parameters:
                paths:
                  uid: true

  speedtestnetserver:
      handler: bin/speedtestnetserver
      events:
        - http:
            path: speedtestnetserver/country
            method: GET
            private: true
        - http:
            path: speedtestnetserver/country/{countryCode}
            method: GET
            private: true
            request:
              parameters:
                paths:
                  countryCode: true
        - http:
            path: speedtestnetserver/country/{countryCode}/{serverID}
            method: GET
            private: true
            request:
              parameters:
                paths:
                  countryCode: true
                  serverID: true

  speedtestnetserverupdate:
      handler: bin/speedtestnetserverupdate
      events:
        # - schedule: cron(10 * * * ? *)

          # cron(1 0 ? * SUN *) = Sunday at 00:01
        - schedule: cron(1 0 ? * SUN *)

  user:
      handler: bin/user
      events:
        - http:
            path: user
            method: GET
            private: true

        - http:
            path: user
            method: POST
            private: true

        - http:
            path: user/me
            method: GET
            private: true

        - http:
            path: /user/{uid}
            method: GET
            private: true
            request:
              parameters:
                paths:
                  uid: true
        - http:
            path: /user/{uid}/tag
            method: GET
            private: true

            request:
              parameters:
                paths:
                  uid: true
        - http:
            path: /user/{uid}
            method: PUT
            private: true
            request:
              parameters:
                paths:
                  uid: true
        - http:
            path: /user/{uid}
            method: DELETE
            private: true
            request:
              parameters:
                paths:
                  uid: true
  version:
      handler: bin/version
      events:
        - http:
            path: version
            method: GET
            private: true

        - http:
            path: version
            method: POST
            private: true

        - http:
            path: /version/{number}
            method: GET
            private: true
            request:
              parameters:
                paths:
                  number: true
        - http:
            path: /version/{number}
            method: PUT
            private: true
            request:
              parameters:
                paths:
                  number: true
        - http:
            path: /version/{number}
            method: DELETE
            private: true
            request:
              parameters:
                paths:
                  number: true

resources:
  Resources:
    dataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: '${self:custom.dataTable}'
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 8
          WriteCapacityUnits: 8
    taskLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: '${self:custom.taskLogTable}'
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: Timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
          - AttributeName: Timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          AttributeName: ExpirationTime
          Enabled: true

    ScalingRole:
      Type: "AWS::IAM::Role"
      Properties:
       AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
         -
          Effect: Allow
          Principal:
           Service:
            -
             "application-autoscaling.amazonaws.com"
          Action:
           -
            "sts:AssumeRole"
       Path: "/"
       Policies:
        -
         PolicyName: root
         PolicyDocument:
          Version: "2012-10-17"
          Statement:
           -
            Effect: Allow
            Action:
             - "dynamodb:DescribeTable"
             - "dynamodb:UpdateTable"
             - "cloudwatch:PutMetricAlarm"
             - "cloudwatch:DescribeAlarms"
             - "cloudwatch:GetMetricStatistics"
             - "cloudwatch:SetAlarmState"
             - "cloudwatch:DeleteAlarms"
            Resource: "*"

    DataTableReadCapacityScalableTarget:
      Type: "AWS::ApplicationAutoScaling::ScalableTarget"
      Properties:
       MaxCapacity: ${self:custom.maxRcu}
       MinCapacity: ${self:custom.minRcu}
       ResourceId: !Sub table/${self:custom.dataTable}
       RoleARN: !GetAtt ScalingRole.Arn
       ScalableDimension: "dynamodb:table:ReadCapacityUnits"
       ServiceNamespace: dynamodb

    DataTableWriteCapacityScalableTarget:
      Type: "AWS::ApplicationAutoScaling::ScalableTarget"
      Properties:
       MaxCapacity: ${self:custom.maxWcu}
       MinCapacity: ${self:custom.minWcu}
       ResourceId: !Sub table/${self:custom.dataTable}
       RoleARN: !GetAtt ScalingRole.Arn
       ScalableDimension: "dynamodb:table:WriteCapacityUnits"
       ServiceNamespace: dynamodb

    DataTableReadScalingPolicy:
      Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
       PolicyName: ReadAutoScalingPolicy
       PolicyType: TargetTrackingScaling
       ScalingTargetId:
        Ref: DataTableReadCapacityScalableTarget
       TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 5
        PredefinedMetricSpecification:
         PredefinedMetricType: DynamoDBReadCapacityUtilization

    DataTableWriteScalingPolicy:
      Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
       PolicyName: WriteAutoScalingPolicy
       PolicyType: TargetTrackingScaling
       ScalingTargetId:
        Ref: DataTableWriteCapacityScalableTarget
       TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 5
        PredefinedMetricSpecification:
         PredefinedMetricType: DynamoDBWriteCapacityUtilization

    TaskLogTableReadCapacityScalableTarget:
      Type: "AWS::ApplicationAutoScaling::ScalableTarget"
      Properties:
       MaxCapacity: ${self:custom.maxRcu}
       MinCapacity: ${self:custom.minRcu}
       ResourceId: !Sub table/${self:custom.taskLogTable}
       RoleARN: !GetAtt ScalingRole.Arn
       ScalableDimension: "dynamodb:table:ReadCapacityUnits"
       ServiceNamespace: dynamodb

    TaskLogTableWriteCapacityScalableTarget:
      Type: "AWS::ApplicationAutoScaling::ScalableTarget"
      Properties:
       MaxCapacity: ${self:custom.maxWcu}
       MinCapacity: ${self:custom.minWcu}
       ResourceId: !Sub table/${self:custom.taskLogTable}
       RoleARN: !GetAtt ScalingRole.Arn
       ScalableDimension: "dynamodb:table:WriteCapacityUnits"
       ServiceNamespace: dynamodb

    TaskLogTableReadScalingPolicy:
      Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
       PolicyName: ReadAutoScalingPolicy
       PolicyType: TargetTrackingScaling
       ScalingTargetId:
        Ref: TaskLogTableReadCapacityScalableTarget
       TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 5
        PredefinedMetricSpecification:
         PredefinedMetricType: DynamoDBReadCapacityUtilization

    TaskLogTableWriteScalingPolicy:
      Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
       PolicyName: WriteAutoScalingPolicy
       PolicyType: TargetTrackingScaling
       ScalingTargetId:
        Ref: TaskLogTableWriteCapacityScalableTarget
       TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 5
        PredefinedMetricSpecification:
         PredefinedMetricType: DynamoDBWriteCapacityUtilization